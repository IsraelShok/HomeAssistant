(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["PromiseController"] = factory();
	else
		root["PromiseController"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/defaults.js":
/*!*************************!*\
  !*** ./src/defaults.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @typedef {Object} Options\n *\n * @property {Number} [timeout=0] - Timeout in ms after that promise will be rejected automatically.\n * @property {String|Function} [timeoutReason] - Rejection reason for timeout.\n * Promise will be rejected with {@link PromiseController.TimeoutError} and this message. The message can contain\n * placeholder `{timeout}` for actual timeout value. If timeoutReason is a function,\n * it will be evaluated and returned value will be used as message.\n * @property {String|Function} [resetReason] - Rejection reason used when `.reset()` is called while promise is pending.\n * Promise will be rejected with {@link PromiseController.ResetError} and this message. If resetReason is a function,\n * it will be evaluated and returned value will be used as message.\n */\n\nmodule.exports = {\n  timeout: 0,\n  timeoutReason: 'Promise rejected by PromiseController timeout {timeout} ms.',\n  resetReason: 'Promise rejected by PromiseController reset.'\n};\n\n//# sourceURL=webpack://PromiseController/./src/defaults.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @ignore\n */\nvar defaults = __webpack_require__(/*! ./defaults */ \"./src/defaults.js\");\n\nvar _require = __webpack_require__(/*! ./utils */ \"./src/utils.js\"),\n    isPromise = _require.isPromise,\n    createErrorType = _require.createErrorType,\n    tryCall = _require.tryCall;\n\n/**\n * @typicalname pc\n */\n\n\nvar PromiseController = function () {\n  /**\n   * Creates promise controller. Unlike original Promise, it does not immediately call any function.\n   * Instead it has [.call()](#PromiseController+call) method that calls provided function\n   * and stores `resolve / reject` methods for future access.\n   *\n   * @param {Options} [options]\n   */\n  function PromiseController(options) {\n    _classCallCheck(this, PromiseController);\n\n    this._options = Object.assign({}, defaults, options);\n    this._resolve = null;\n    this._reject = null;\n    this._isPending = false;\n    this._isFulfilled = false;\n    this._isRejected = false;\n    this._value = undefined;\n    this._promise = null;\n    this._timer = null;\n  }\n\n  /**\n   * Returns promise itself.\n   *\n   * @returns {Promise}\n   */\n\n\n  _createClass(PromiseController, [{\n    key: 'call',\n\n\n    /**\n     * Calls `fn` and returns promise OR just returns existing promise from previous `call()` if it is still pending.\n     * To fulfill returned promise you should use\n     * {@link PromiseController#resolve} / {@link PromiseController#reject} methods.\n     * If `fn` itself returns promise, then external promise is attached to it and fulfills together.\n     * If no `fn` passed - promiseController is initialized as well.\n     *\n     * @param {Function} [fn] function to be called.\n     * @returns {Promise}\n     */\n    value: function call(fn) {\n      if (!this._isPending) {\n        this.reset();\n        this._createPromise();\n        this._createTimer();\n        this._callFn(fn);\n      }\n      return this._promise;\n    }\n\n    /**\n     * Resolves pending promise with specified `value`.\n     *\n     * @param {*} [value]\n     */\n\n  }, {\n    key: 'resolve',\n    value: function resolve(value) {\n      if (this._isPending) {\n        if (isPromise(value)) {\n          this._tryAttachToPromise(value);\n        } else {\n          this._settle(value);\n          this._isFulfilled = true;\n          this._resolve(value);\n        }\n      }\n    }\n\n    /**\n     * Rejects pending promise with specified `value`.\n     *\n     * @param {*} [value]\n     */\n\n  }, {\n    key: 'reject',\n    value: function reject(value) {\n      if (this._isPending) {\n        this._settle(value);\n        this._isRejected = true;\n        this._reject(value);\n      }\n    }\n\n    /**\n     * Resets to initial state.\n     * If promise is pending it will be rejected with {@link PromiseController.ResetError}.\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      if (this._isPending) {\n        var message = tryCall(this._options.resetReason);\n        var error = new PromiseController.ResetError(message);\n        this.reject(error);\n      }\n      this._promise = null;\n      this._isPending = false;\n      this._isFulfilled = false;\n      this._isRejected = false;\n      this._value = undefined;\n      this._clearTimer();\n    }\n\n    /**\n     * Re-assign one or more options.\n     *\n     * @param {Options} options\n     */\n\n  }, {\n    key: 'configure',\n    value: function configure(options) {\n      Object.assign(this._options, options);\n    }\n  }, {\n    key: '_createPromise',\n    value: function _createPromise() {\n      var _this = this;\n\n      this._promise = new Promise(function (resolve, reject) {\n        _this._isPending = true;\n        _this._resolve = resolve;\n        _this._reject = reject;\n      });\n    }\n  }, {\n    key: '_handleTimeout',\n    value: function _handleTimeout() {\n      var messageTpl = tryCall(this._options.timeoutReason);\n      var message = typeof messageTpl === 'string' ? messageTpl.replace('{timeout}', this._options.timeout) : '';\n      var error = new PromiseController.TimeoutError(message);\n      this.reject(error);\n    }\n  }, {\n    key: '_createTimer',\n    value: function _createTimer() {\n      var _this2 = this;\n\n      if (this._options.timeout) {\n        this._timer = setTimeout(function () {\n          return _this2._handleTimeout();\n        }, this._options.timeout);\n      }\n    }\n  }, {\n    key: '_clearTimer',\n    value: function _clearTimer() {\n      if (this._timer) {\n        clearTimeout(this._timer);\n        this._timer = null;\n      }\n    }\n  }, {\n    key: '_settle',\n    value: function _settle(value) {\n      this._isPending = false;\n      this._value = value;\n      this._clearTimer();\n    }\n  }, {\n    key: '_callFn',\n    value: function _callFn(fn) {\n      if (typeof fn === 'function') {\n        try {\n          var result = fn();\n          this._tryAttachToPromise(result);\n        } catch (e) {\n          this.reject(e);\n        }\n      }\n    }\n  }, {\n    key: '_tryAttachToPromise',\n    value: function _tryAttachToPromise(p) {\n      var _this3 = this;\n\n      if (isPromise(p)) {\n        p.then(function (value) {\n          return _this3.resolve(value);\n        }, function (e) {\n          return _this3.reject(e);\n        });\n      }\n    }\n  }, {\n    key: 'promise',\n    get: function get() {\n      return this._promise;\n    }\n\n    /**\n     * Returns value with that promise was settled (fulfilled or rejected).\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: 'value',\n    get: function get() {\n      return this._value;\n    }\n\n    /**\n     * Returns true if promise is pending.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'isPending',\n    get: function get() {\n      return this._isPending;\n    }\n\n    /**\n     * Returns true if promise is fulfilled.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'isFulfilled',\n    get: function get() {\n      return this._isFulfilled;\n    }\n\n    /**\n     * Returns true if promise rejected.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'isRejected',\n    get: function get() {\n      return this._isRejected;\n    }\n\n    /**\n     * Returns true if promise is fulfilled or rejected.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'isSettled',\n    get: function get() {\n      return this._isFulfilled || this._isRejected;\n    }\n  }]);\n\n  return PromiseController;\n}();\n\n/**\n * Error for rejection in case of timeout.\n * @type {PromiseController.TimeoutError}\n */\n\n\nPromiseController.TimeoutError = createErrorType('TimeoutError');\n\n/**\n * Error for rejection in case of call `.reset()` while promise is pending.\n * @type {PromiseController.ResetError}\n */\nPromiseController.ResetError = createErrorType('ResetError');\n\nmodule.exports = PromiseController;\n\n//# sourceURL=webpack://PromiseController/./src/index.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Simple check for Promise.\n * @param {*} p\n * @returns {Boolean}\n * @ignore\n */\nexports.isPromise = function (p) {\n  return p && typeof p.then === 'function';\n};\n\n/**\n * Calls argument if it is function\n * @param {*} value\n * @returns {*}\n * @ignore\n */\nexports.tryCall = function (value) {\n  return typeof value === 'function' ? value() : value;\n};\n\n/**\n * Just `class MyError extends Error` does not work with transpiler.\n * See: https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript\n * @ignore\n */\nexports.createErrorType = function (name) {\n  function E(message) {\n    if (!Error.captureStackTrace) {\n      this.stack = new Error().stack;\n    } else {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    this.message = message;\n  }\n  E.prototype = new Error();\n  E.prototype.name = name;\n  E.prototype.constructor = E;\n  return E;\n};\n\n//# sourceURL=webpack://PromiseController/./src/utils.js?");

/***/ })

/******/ });
});